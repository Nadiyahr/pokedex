{"version":3,"sources":["api/consts.ts","api/pocemon.ts","components/FindPokemon/index.ts","components/FindPokemon/FindPokemon.tsx","components/PkemonDetails/index.ts","components/PkemonDetails/PokemonDetails.tsx","components/PokemonCard/index.ts","components/PokemonCard/PokemonCard.tsx","components/PokemonList/index.ts","components/PokemonList/PokemonList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","POKEMONS","TYPES","COLOR_TYPES","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","requestPokemon","offset","fetch","then","response","ok","Error","status","statusText","json","requestInfo","name","requestTypeByIndex","index","FindPocemon","props","getIndex","useState","types","setTypes","isOpen","setIsOpen","loadTypes","a","listOfTypes","results","getTypes","useEffect","className","type","onClick","style","color","map","backgroundColor","PokemonDetails","details","setClose","src","sprites","other","front_default","alt","id","toString","padStart","stats","stat","text","includes","replace","toUpperCase","base_stat","weight","moves","length","PokemonCard","pokemon","card","setCard","preparedCard","info","item","PokemonList","onSelectName","pokemons","App","setPokemons","pokemonAreLoaded","setPokemonAreLoaded","setOffset","setDetails","typeIndex","setTypeIndex","typeName","setTypeName","indexLoaded","setIndexLoaded","typeOffset","setTypeOffset","loadData","listFromServer","loadCard","loadTypeWithIndex","listByIndexType","slice","x","prevOffset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2b18269.chunk.js","sourcesContent":["export const BASE_URL = 'https://pokeapi.co/api/v2';\nexport const POKEMONS = 'pokemon';\nexport const POKEMONS_PER_PAGE = 12;\nexport const TYPES = 'type';\nexport const COLOR_TYPES: Colors = {\n  normal: '#a8a878',\n  fighting: '#c03028',\n  flying: '#a890f0',\n  poison: '#a040a0',\n  ground: '#e0c068',\n  rock: '#b8a038',\n  bug: '#a8b820',\n  ghost: '#705898',\n  steel: '#b8b8d0',\n  fire: '#f08030',\n  water: '#6890f0',\n  grass: '#78c850',\n  electric: '#f8d030',\n  psychic: '#f85888',\n  ice: '#98d8d8',\n  dragon: '#7038f8',\n  dark: '#705848',\n  fairy: '#ee99ac',\n  unknown: '#68a090',\n  shadow: '#d4eff0',\n};\n","import {\n  BASE_URL, POKEMONS, TYPES,\n} from './consts';\n\nexport const requestPokemon = (offset: number) => {\n  return fetch(`${BASE_URL}/${POKEMONS}/?limit=${offset}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestInfo = (name: string | number | null) => {\n  return fetch(`${BASE_URL}/${POKEMONS}/${name}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestTypes = () => {\n  return fetch(`${BASE_URL}/${TYPES}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestTypeByIndex = (index: number | '') => {\n  return fetch(`${BASE_URL}/${TYPES}/${index}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { FindPocemon } from './FindPokemon';\n\nexport default FindPocemon;\n","import React, { useEffect, useState } from 'react';\nimport { COLOR_TYPES } from '../../api/consts';\nimport { requestTypes } from '../../api/pocemon';\nimport './FindPokemon.scss';\n\ntype Props = {\n  getIndex: (index: number, name: string) => void;\n};\n\nexport const FindPocemon: React.FC<Props> = (props) => {\n  const { getIndex } = props;\n  const [types, setTypes] = useState<PokemonType[]>([]);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const loadTypes = async () => {\n    const listOfTypes = await requestTypes();\n\n    setTypes(listOfTypes.results);\n  };\n\n  const getTypes = () => {\n    setIsOpen(!isOpen);\n  };\n\n  useEffect(() => {\n    loadTypes();\n  }, []);\n\n  return (\n    <div className=\"Select\">\n      <button\n        type=\"button\"\n        onClick={getTypes}\n        className=\"Select_btn\"\n      >\n        Select Types\n        <span className=\"Select_span\">&#9660;</span>\n      </button>\n      <div className=\"Select_container\">\n        {isOpen && types && (\n          <ul className=\"Select_list\">\n            <button\n              key=\"zero\"\n              type=\"button\"\n              className=\"Select_item\"\n              onClick={() => {\n                getTypes();\n                getIndex(0, '');\n              }}\n            >\n              <li\n                key=\"liZero\"\n                style={{ color: '#000' }}\n              >\n                0 all\n              </li>\n            </button>\n            {types.map((type, index) => (\n              <button\n                key={type.name}\n                type=\"button\"\n                className=\"Select_item\"\n                style={{ backgroundColor: COLOR_TYPES[type.name] }}\n                onClick={() => {\n                  getTypes();\n                  getIndex(index, type.name);\n                }}\n              >\n                <li\n                  key={type.name}\n                  className=\"Select_item--li\"\n                >\n                  {`${index + 1} ${type.name}`}\n                </li>\n              </button>\n            ))}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { PokemonDetails } from './PokemonDetails';\n\nexport default PokemonDetails;\n","import React from 'react';\nimport { COLOR_TYPES } from '../../api/consts';\nimport './PokemonDetails.scss';\n\ntype Props = {\n  setClose: (data: Card | null) => void;\n  details: Card | null;\n};\n\nexport const PokemonDetails: React.FC<Props> = (props) => {\n  const { details, setClose } = props;\n\n  const textTrasform = (text: string) => {\n    if (text.includes('special-')) {\n      return text.replace(/special-/, 'SP ');\n    }\n\n    if (text === 'hp') {\n      return text.toUpperCase();\n    }\n\n    return text;\n  };\n\n  return (\n    <>\n      {details && (\n        <button\n          className=\"Details\"\n          onClick={() => setClose(null)}\n          type=\"button\"\n          key={details.id}\n        >\n          <div className=\"Details_container\">\n            <img\n              src={details.sprites.other['official-artwork'].front_default}\n              alt={details.name}\n            />\n          </div>\n          <div className=\"Details_bottom\">\n            <h2 className=\"Details_title\">\n              {`${details.name} #${details.id.toString().padStart(3, '0')}`}\n            </h2>\n            <ul className=\"Details_list\">\n              {details.types.map(type => (\n                <li\n                  className=\"Details_item\"\n                  key={type.type.name}\n                  style={{ backgroundColor: COLOR_TYPES[type.type.name] }}\n                >\n                  Type\n                  <span className=\"Details_value\">\n                    {type.type.name}\n                  </span>\n                </li>\n              ))}\n              {details.stats.map(stat => (\n                <li key={stat.stat.name} className=\"Details_item\">\n                  {textTrasform(stat.stat.name)}\n                  <span className=\"Details_value\">\n                    {stat.base_stat}\n                  </span>\n                </li>\n              ))}\n              <li\n                className=\"Details_item\"\n                key=\"weight\"\n              >\n                Weight\n                <span className=\"Details_value\">\n                  {details.weight}\n                </span>\n              </li>\n              <li\n                className=\"Details_item\"\n                key=\"moves\"\n              >\n                Total moves\n                <span className=\"Details_value\">\n                  {details.moves.length}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </button>\n      )}\n    </>\n  );\n};\n","import { PokemonCard } from './PokemonCard';\n\nexport default PokemonCard;\n","import React, { useEffect, useState } from 'react';\nimport { COLOR_TYPES } from '../../api/consts';\nimport { requestInfo } from '../../api/pocemon';\nimport './PokemonCard.scss';\n\ntype Props = {\n  pokemon: Pokemon;\n};\n\nexport const PokemonCard: React.FC<Props> = (props) => {\n  const { pokemon } = props;\n  const [card, setCard] = useState<Card | null>(null);\n\n  const preparedCard = async () => {\n    const info = await requestInfo(pokemon.name);\n\n    setCard(info);\n  };\n\n  useEffect(() => {\n    preparedCard();\n  }, []);\n\n  return (\n    <>\n      {card && (\n        <li key={card.id}>\n          <div className=\"Card\">\n            <div className=\"Card_div\">\n              <img\n                src={card.sprites.other['official-artwork'].front_default}\n                alt={card.name}\n                className=\"Card_img\"\n              />\n            </div>\n            <div className=\"Card_bottom\">\n              <h2 className=\"Card_title\">{card.name}</h2>\n              <div className=\"Card_buttons\">\n                {card.types.map(item => (\n                  <div\n                    key={item.type.name}\n                    className=\"Card_types\"\n                    style={{ backgroundColor: COLOR_TYPES[item.type.name] }}\n                  >\n                    {item.type.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n","import { PokemonList } from './PokemonList';\n\nexport default PokemonList;\n","import React from 'react';\nimport PokemonCard from '../PokemonCard';\nimport './PokemonList.scss';\n\ntype Props = {\n  onSelectName: (name: string | '') => void;\n  pokemons: Pokemon[];\n};\n\nexport const PokemonList: React.FC<Props> = (props) => {\n  const { onSelectName, pokemons } = props;\n\n  return (\n    <ul className=\"App_list\">\n      {pokemons.map(pokemon => (\n        <button\n          className=\"btn\"\n          key={pokemon.name}\n          type=\"button\"\n          onClick={() => onSelectName(pokemon.name)}\n        >\n          <PokemonCard\n            key={pokemon.name}\n            pokemon={pokemon}\n          />\n        </button>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { requestInfo, requestPokemon, requestTypeByIndex } from './api/pocemon';\nimport FindPocemon from './components/FindPokemon';\nimport { POKEMONS_PER_PAGE } from './api/consts';\nimport PokemonDetails from './components/PkemonDetails';\nimport PokemonList from './components/PokemonList';\n\nexport const App: React.FC = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  const [pokemonAreLoaded, setPokemonAreLoaded] = useState<boolean>(true);\n  const [offset, setOffset] = useState<number>(POKEMONS_PER_PAGE);\n  const [details, setDetails] = useState<Card | null>(null);\n  const [typeIndex, setTypeIndex] = useState<number | 0>(0);\n  const [typeName, setTypeName] = useState<string | ''>('');\n  const [indexLoaded, setIndexLoaded] = useState<boolean>(false);\n  const [typeOffset, setTypeOffset] = useState<number>(POKEMONS_PER_PAGE);\n\n  const loadData = async () => {\n    const listFromServer = await requestPokemon(offset);\n\n    setPokemons(listFromServer.results);\n  };\n\n  const loadCard = async (name: string) => {\n    const info = await requestInfo(name);\n\n    setDetails(info);\n  };\n\n  const getPokemon = (name: string) => {\n    loadCard(name);\n  };\n\n  const loadTypeWithIndex = async (index: number) => {\n    const listByIndexType = await requestTypeByIndex(index + 1);\n\n    setPokemons(listByIndexType.pokemon\n      .slice(0, typeOffset)\n      .map((x: TypePokemon) => x.pokemon));\n  };\n\n  const getIndexType = (index: number, name: string) => {\n    if (index) {\n      setPokemonAreLoaded(false);\n    } else {\n      setPokemonAreLoaded(true);\n    }\n\n    setIndexLoaded(!indexLoaded);\n    setTypeIndex(index);\n    setTypeName(name);\n  };\n\n  const loadMore = () => {\n    if (indexLoaded) {\n      setTypeOffset(prevOffset => prevOffset + 12);\n    }\n\n    if (pokemonAreLoaded) {\n      setOffset(prevOffset => prevOffset + 12);\n    }\n  };\n\n  useEffect(() => {\n    if (pokemonAreLoaded) {\n      loadData();\n    }\n\n    if (typeIndex) {\n      loadTypeWithIndex(typeIndex);\n    }\n  }, [offset, pokemonAreLoaded, typeOffset, typeIndex]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_header\">\n        <h1 className=\"App_title\">\n          <span className=\"App_span\">\n            {pokemonAreLoaded ? 'all ' : `${typeName} `}\n          </span>\n          Pokedex\n        </h1>\n        <FindPocemon\n          getIndex={getIndexType}\n        />\n      </div>\n      <div className=\"App_main\">\n        <PokemonList onSelectName={getPokemon} pokemons={pokemons} />\n        <button\n          type=\"button\"\n          className=\"App_more\"\n          onClick={loadMore}\n        >\n          Load More\n        </button>\n      </div>\n      <div className=\"App_sidebar\">\n        {details && (\n          <PokemonDetails\n            setClose={setDetails}\n            details={details}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}