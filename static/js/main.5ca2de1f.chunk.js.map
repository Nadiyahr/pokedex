{"version":3,"sources":["api/api.ts","components/PokemonCard/index.ts","components/PokemonCard/PokemonCard.tsx","api/pocemon.ts","components/pokemonList/index.ts","components/pokemonList/PokemonList.tsx","components/FindPokemon/index.ts","components/FindPokemon/FindPokemon.tsx","App.tsx","index.tsx"],"names":["BASE_URL","POKEMONS","PokemonCard","props","pokemon","key","useState","card","setCard","preparedCard","a","name","fetch","then","response","ok","Error","status","statusText","json","info","useEffect","className","src","sprites","other","front_default","alt","type","types","PokemonList","pokemons","map","FindPocemon","App","setPokemons","loadData","pokemonFromServer","results","pokemonReady","useMemo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAAaA,G,MAAW,6BACXC,EAAW,U,eCCTC,ECQ6B,SAACC,GAC3C,IAAQC,EAAiBD,EAAjBC,QAASC,EAAQF,EAARE,IACjB,EAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAY,uCAAG,4BAAAC,EAAA,sECCKC,EDAOP,EAAQO,KCClCC,MAAM,GAAD,OAAIZ,EAAJ,YAAgBC,EAAhB,YAA4BU,IACrCE,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UDRC,OACbC,EADa,OAGnBZ,EAAQY,GAHW,iCCCI,IAACT,IDDL,OAAH,qDAUlB,OAJAU,qBAAU,WACRZ,MACC,IAGD,6BACGF,GACC,sBAAKe,UAAU,OAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBACEC,IAAKhB,EAAKiB,QAAQC,MAAM,oBAAoBC,cAC5CC,IAAKpB,EAAKI,KACVW,UAAU,eAGd,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,aAAd,SAA4Bf,EAAKI,OACjC,wBACEiB,KAAK,SACLN,UAAU,WAFZ,SAIGf,EAAKsB,MAAM,GAAGD,KAAKjB,cAhBrBN,IEvBEyB,G,MCM6B,SAAC3B,GAC3C,IAAQ4B,EAAa5B,EAAb4B,SAER,OACE,mCACGA,EAASC,KAAI,SAAA5B,GAAO,OACnB,cAAC,EAAD,CAAgCA,QAASA,GAAvBA,EAAQO,aCZnBsB,ECOsB,WAGnC,OACE,8BCNSC,EAAgB,WAC3B,MAAgC5B,mBAAoB,IAApD,mBAAOyB,EAAP,KAAiBI,EAAjB,KAIMC,EAAQ,uCAAG,4BAAA1B,EAAA,sELPVE,MAAM,GAAD,OAAIZ,EAAJ,YAAgBC,EAAhB,mBHHmB,KGI5BY,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UKCH,OACTkB,EADS,OAIfF,EAAYE,EAAkBC,SAJf,2CAAH,qDAgBdjB,qBAAU,WACRe,MACC,IAEH,IAAMG,EAAeC,mBAAQ,WAC3B,OAAOT,IACN,CAACA,IAEJ,OACE,sBAAKT,UAAU,MAAf,UACE,sBAAKA,UAAU,aAAf,UACE,oBAAIA,UAAU,YAAd,qBAGA,cAAC,EAAD,OAEF,qBAAKA,UAAU,WAAf,SACE,oBAAIA,UAAU,WAAd,SACGS,EAASC,KAAI,SAAA5B,GAAO,OACnB,cAAC,EAAD,CAAgC2B,SAAUQ,GAAxBnC,EAAQO,aAIhC,qBAAKW,UAAU,cAAf,SACE,+CC/CRmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5ca2de1f.chunk.js","sourcesContent":["export const BASE_URL = 'https://pokeapi.co/api/v2';\nexport const POKEMONS = 'pokemon';\nexport const POKEMONS_PER_PAGE = 12;\nexport const TYPES = 'type';\n","import { PokemonCard } from './PokemonCard';\n\nexport default PokemonCard;\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { requestInfo } from '../../api/pocemon';\nimport './PokemonCard.scss';\n\ntype Props = {\n  key: string;\n  pokemon: Pokemon;\n};\n\nexport const PokemonCard: React.FC<Props> = (props) => {\n  const { pokemon, key } = props;\n  const [card, setCard] = useState<Card | null>(null);\n\n  const preparedCard = async () => {\n    const info = await requestInfo(pokemon.name);\n\n    setCard(info);\n  };\n\n  useEffect(() => {\n    preparedCard();\n  }, []);\n\n  return (\n    <li key={key}>\n      {card && (\n        <div className=\"Card\">\n          <div className=\"Card_div\">\n            <img\n              src={card.sprites.other['official-artwork'].front_default}\n              alt={card.name}\n              className=\"Card_img\"\n            />\n          </div>\n          <div className=\"Card_bottom\">\n            <h2 className=\"Card_title\">{card.name}</h2>\n            <button\n              type=\"button\"\n              className=\"Card_btn\"\n            >\n              {card.types[0].type.name}\n            </button>\n          </div>\n        </div>\n      )}\n    </li>\n  );\n};\n","import {\n  BASE_URL, POKEMONS, POKEMONS_PER_PAGE, TYPES,\n} from './api';\n\nexport const requestPokemon = () => {\n  return fetch(`${BASE_URL}/${POKEMONS}/?limit=${POKEMONS_PER_PAGE}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestInfo = (name: string) => {\n  return fetch(`${BASE_URL}/${POKEMONS}/${name}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestTypes = () => {\n  return fetch(`${BASE_URL}/${TYPES}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestCard = (url: string) => {\n  return fetch(`${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { PokemonList } from './PokemonList';\n\nexport default PokemonList;\n","import React from 'react';\nimport PokemonCard from '../PokemonCard';\nimport './PokemonList.scss';\n\ntype Props = {\n  pokemons: Pokemon[];\n};\n\nexport const PokemonList: React.FC<Props> = (props) => {\n  const { pokemons } = props;\n\n  return (\n    <>\n      {pokemons.map(pokemon => (\n        <PokemonCard key={pokemon.name} pokemon={pokemon} />\n      ))}\n    </>\n  );\n};\n","import { FindPocemon } from './FindPokemon';\n\nexport default FindPocemon;\n","import React from 'react';\n// import Select, { MultiValue } from 'react-select';\n\n// interface Props {\n//   selectedFilters: MultiValue<ReactSelect<string>>;\n//   setSelectedFilters: (filters: MultiValue<ReactSelect<string>>) => void;\n//   className: string;\n// }\n\nexport const FindPocemon: React.FC = () => {\n  // const [options, setOptions] = useState<MultiValue<ReactSelect<string>>>([]);\n\n  return (\n    <>\n      {/* <Select options={optons} isMulti /> */}\n    </>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport { requestPokemon } from './api/pocemon';\nimport PokemonList from './components/pokemonList';\nimport FindPocemon from './components/FindPokemon';\n\nexport const App: React.FC = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  // const [isOpen, setOpen] = useState<boolean>(false);\n  // const [card, setCard] = useState<Card>([]);\n\n  const loadData = async () => {\n    const pokemonFromServer = await requestPokemon();\n    // const pokemonTypes = await requestTypes();\n\n    setPokemons(pokemonFromServer.results);\n  };\n\n  // const toggleOpen = async () => {\n  //   setOpen(!isOpen);\n\n  //   const pokemonC = await requestCard(pokemons[1].url);\n  //   // const url = await requestCard(pokemonC.game_indices[0].version.url);\n\n  //   console.log(pokemonC);\n  // };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const pokemonReady = useMemo(() => {\n    return pokemons;\n  }, [pokemons]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_header\">\n        <h1 className=\"App_title\">\n          Pokedex\n        </h1>\n        <FindPocemon />\n      </div>\n      <div className=\"App_main\">\n        <ul className=\"App_list\">\n          {pokemons.map(pokemon => (\n            <PokemonList key={pokemon.name} pokemons={pokemonReady} />\n          ))}\n        </ul>\n      </div>\n      <div className=\"App_sidebar\">\n        <h2>Sidebar</h2>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}