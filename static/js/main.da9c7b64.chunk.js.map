{"version":3,"sources":["api/api.ts","api/pocemon.ts","components/FindPokemon/index.ts","components/FindPokemon/FindPokemon.tsx","components/PkemonDetails/index.ts","components/PkemonDetails/PokemonDetails.tsx","components/PokemonCard/index.ts","components/PokemonCard/PokemonCard.tsx","components/PokemonList/index.ts","components/PokemonList/PokemonList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","POKEMONS","COLOR_TYPES","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","requestPokemon","offset","fetch","then","response","ok","Error","status","statusText","json","requestInfo","name","FindPocemon","props","getAllTypes","allTypes","className","type","onClick","map","PokemonDetails","details","setClose","console","log","src","sprites","other","front_default","alt","id","toString","padStart","types","style","color","stats","stat","text","includes","replace","toUpperCase","base_stat","weight","moves","length","PokemonCard","pokemon","useState","card","setCard","preparedCard","a","info","useEffect","item","backgroundColor","PokemonList","onSelectName","pokemons","App","setPokemons","setOffset","setDetails","setTypes","loadData","listFromServer","results","loadCard","loadTypes","listOfTypes","prevOffset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da9c7b64.chunk.js","sourcesContent":["export const BASE_URL = 'https://pokeapi.co/api/v2';\nexport const POKEMONS = 'pokemon';\nexport const POKEMONS_PER_PAGE = 12;\nexport const TYPES = 'type';\nexport const COLOR_TYPES: Colors = {\n  normal: '#a8a878',\n  fighting: '#c03028',\n  flying: '#a890f0',\n  poison: '#a040a0',\n  ground: '#e0c068',\n  rock: '#b8a038',\n  bug: '#a8b820',\n  ghost: '#705898',\n  steel: '#b8b8d0',\n  fire: '#f08030',\n  water: '#6890f0',\n  grass: '#78c850',\n  electric: '#f8d030',\n  psychic: '#f85888',\n  ice: '#98d8d8',\n  dragon: '#7038f8',\n  dark: '#705848',\n  fairy: '#ee99ac',\n  unknown: '#68a090',\n  shadow: '#d4eff0',\n};\n","import {\n  BASE_URL, POKEMONS, TYPES,\n} from './api';\n\nexport const requestPokemon = (offset: number) => {\n  return fetch(`${BASE_URL}/${POKEMONS}/?limit=${offset}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestInfo = (name: string | number | null) => {\n  return fetch(`${BASE_URL}/${POKEMONS}/${name}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestTypes = () => {\n  return fetch(`${BASE_URL}/${TYPES}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import { FindPocemon } from './FindPokemon';\n\nexport default FindPocemon;\n","import React from 'react';\n// import Select, { MultiValue } from 'react-select';\n\n// interface Props {\n//   selectedFilters: MultiValue<ReactSelect<string>>;\n//   setSelectedFilters: (filters: MultiValue<ReactSelect<string>>) => void;\n//   className: string;\n// }\n\ntype Props = {\n  getAllTypes: () => void;\n  allTypes: PokemonType[] | null;\n};\n\nexport const FindPocemon: React.FC<Props> = (props) => {\n  const { getAllTypes, allTypes } = props;\n\n  return (\n    <div className=\"Select\">\n      <button\n        type=\"button\"\n        onClick={() => getAllTypes()}\n        className=\"Select_btn\"\n      >\n        Select Types\n      </button>\n      {allTypes && (\n        <ul className=\"Select_list\">\n          {allTypes.map(type => (\n            <li key={type.name} className=\"Select_item\">{type.name}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import { PokemonDetails } from './PokemonDetails';\n\nexport default PokemonDetails;\n","import React from 'react';\nimport { COLOR_TYPES } from '../../api/api';\nimport './PokemonDetails.scss';\n\ntype Props = {\n  setClose: (data: Card | null) => void;\n  details: Card | null;\n};\n\nexport const PokemonDetails: React.FC<Props> = (props) => {\n  const { details, setClose } = props;\n\n  // eslint-disable-next-line no-console\n  console.log(details);\n\n  const textTrasform = (text: string) => {\n    if (text.includes('special-')) {\n      return text.replace(/special-/, 'SP ');\n    }\n\n    if (text === 'hp') {\n      return text.toUpperCase();\n    }\n\n    return text;\n  };\n\n  return (\n    <>\n      {details && (\n        <button\n          className=\"Details\"\n          onClick={() => setClose(null)}\n          type=\"button\"\n          key={details.id}\n        >\n          <div className=\"Details_container\">\n            <img\n              src={details.sprites.other['official-artwork'].front_default}\n              alt={details.name}\n            />\n          </div>\n          <div className=\"Details_bottom\">\n            <h2 className=\"Details_title\">\n              {`${details.name} #${details.id.toString().padStart(3, '0')}`}\n            </h2>\n            <ul className=\"Details_list\">\n              {details.types.map(type => (\n                <li\n                  className=\"Details_item\"\n                  key={type.type.name}\n                >\n                  Type\n                  <span className=\"Details_value\" style={{ color: COLOR_TYPES[type.type.name] }}>\n                    {type.type.name}\n                  </span>\n                </li>\n              ))}\n              {details.stats.map(stat => (\n                <li key={stat.stat.name} className=\"Details_item\">\n                  {textTrasform(stat.stat.name)}\n                  <span className=\"Details_value\">\n                    {stat.base_stat}\n                  </span>\n                </li>\n              ))}\n              <li\n                className=\"Details_item\"\n                key=\"weight\"\n              >\n                Weight\n                <span className=\"Details_value\">\n                  {details.weight}\n                </span>\n              </li>\n              <li\n                className=\"Details_item\"\n                key=\"moves\"\n              >\n                Total moves\n                <span className=\"Details_value\">\n                  {details.moves.length}\n                </span>\n              </li>\n            </ul>\n          </div>\n        </button>\n      )}\n    </>\n  );\n};\n","import { PokemonCard } from './PokemonCard';\n\nexport default PokemonCard;\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { COLOR_TYPES } from '../../api/api';\nimport { requestInfo } from '../../api/pocemon';\nimport './PokemonCard.scss';\n\ntype Props = {\n  pokemon: Pokemon;\n};\n\nexport const PokemonCard: React.FC<Props> = (props) => {\n  const { pokemon } = props;\n  const [card, setCard] = useState<Card | null>(null);\n\n  const preparedCard = async () => {\n    const info = await requestInfo(pokemon.name);\n\n    setCard(info);\n\n    console.log(info);\n  };\n\n  useEffect(() => {\n    preparedCard();\n  }, []);\n\n  return (\n    <>\n      {card && (\n        <li key={card.id}>\n          <div className=\"Card\">\n            <div className=\"Card_div\">\n              <img\n                src={card.sprites.other['official-artwork'].front_default}\n                alt={card.name}\n                className=\"Card_img\"\n              />\n            </div>\n            <div className=\"Card_bottom\">\n              <h2 className=\"Card_title\">{card.name}</h2>\n              <div className=\"Card_buttons\">\n                {card.types.map(item => (\n                  <div\n                    key={item.type.name}\n                    className=\"Card_types\"\n                    style={{ backgroundColor: COLOR_TYPES[item.type.name] }}\n                  >\n                    {item.type.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </li>\n      )}\n    </>\n  );\n};\n","import { PokemonList } from './PokemonList';\n\nexport default PokemonList;\n","/* eslint-disable no-console */\nimport React from 'react';\nimport PokemonCard from '../PokemonCard';\nimport './PokemonList.scss';\n\ntype Props = {\n  onSelectName: (name: string | '') => void;\n  pokemons: Pokemon[];\n};\n\nexport const PokemonList: React.FC<Props> = (props) => {\n  const { onSelectName, pokemons } = props;\n  // const [name, setName] = useState<string | ''>('');\n\n  // useEffect(() => {\n  //   console.log(name);\n  //   onSelectName(name);\n  // }, [name]);\n\n  return (\n    <ul className=\"App_list\">\n      {pokemons.map(pokemon => (\n        <button\n          className=\"btn\"\n          key={pokemon.name}\n          type=\"button\"\n          onClick={() => onSelectName(pokemon.name)}\n        >\n          <PokemonCard\n            key={pokemon.name}\n            pokemon={pokemon}\n          />\n        </button>\n      ))}\n    </ul>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { requestInfo, requestPokemon, requestTypes } from './api/pocemon';\nimport FindPocemon from './components/FindPokemon';\nimport { POKEMONS_PER_PAGE } from './api/api';\nimport PokemonDetails from './components/PkemonDetails';\nimport PokemonList from './components/PokemonList';\n\nexport const App: React.FC = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  const [offset, setOffset] = useState<number>(POKEMONS_PER_PAGE);\n  const [details, setDetails] = useState<Card | null>(null);\n  const [types, setTypes] = useState<PokemonType[]>([]);\n\n  const loadData = async () => {\n    const listFromServer = await requestPokemon(offset);\n\n    setPokemons(listFromServer.results);\n  };\n\n  const loadCard = async (name: string) => {\n    const info = await requestInfo(name);\n\n    setDetails(info);\n  };\n\n  const getPokemon = (name: string) => {\n    loadCard(name);\n  };\n\n  const loadTypes = async () => {\n    const listOfTypes = await requestTypes();\n\n    setTypes(listOfTypes.results);\n\n    console.log(listOfTypes.results);\n    console.log(types);\n  };\n\n  const getTypes = () => {\n    loadTypes();\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [offset]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_header\">\n        <h1 className=\"App_title\">\n          Pokedex\n        </h1>\n        <FindPocemon getAllTypes={getTypes} allTypes={types} />\n      </div>\n      <div className=\"App_main\">\n        <PokemonList onSelectName={getPokemon} pokemons={pokemons} />\n        <button\n          type=\"button\"\n          className=\"App_more\"\n          onClick={() => setOffset(prevOffset => prevOffset + 12)}\n        >\n          Load More\n        </button>\n      </div>\n      <div className=\"App_sidebar\">\n        {details && (\n          <PokemonDetails\n            setClose={setDetails}\n            details={details}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}